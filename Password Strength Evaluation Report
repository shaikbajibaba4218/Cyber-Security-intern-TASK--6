
Objective:
Understand what makes a password strong by creating passwords of varying complexity, testing them with online tools, and learning how complexity improves security.


 Step 1 – Create multiple passwords
Generate several passwords with varying levels of strength:
* Weak: short, only lowercase letters
* Medium: letters + numbers, moderate length
* Strong: long, mix of letters, numbers, and symbols
This allows comparison of how complexity changes strength scores.


 Step 2 – Use uppercase, lowercase, numbers, symbols, and length variations
Include different character types:
* Uppercase (A–Z)
* Lowercase (a–z)
* Numbers (0–9)
* Symbols (!, @, #, etc.)
Vary the length (e.g., short 6–8 chars; medium 10–12; long 12–16+) to see the effect on strength.


 Step 3 – Test each password on a password strength checker

1. Pick a tester: e.g., passwordmeter.com. Use only the checker page do not log in.
2. Do not enter real/current passwords — use test samples.
3. Paste one password at a time and read the score and feedback.
4. Repeat for all passwords.


 Step 4 – Note scores and feedback from the tool
Record the outputs in a structured table or spreadsheet with columns such as:
* Password ID (P1, P2 — avoid writing real passwords)
* Length
* Char types (upper/lower/number/symbol)
* Tool used (name & URL)
* Score (percentage or rating)
* Tool feedback
* Notes / screenshot filename


 Step 5 – Identify best practices for creating strong passwords
From your recorded results, extract what made the highest-scoring passwords strong:
* Use at least 12–16 characters
* Mix uppercase, lowercase, numbers, and symbols
* Avoid dictionary words, personal info, and obvious patterns
* Use unique passwords per account
* Use a password manager for storage/generation


 Step 6 – Write down tips learned from the evaluation
Convert findings into actionable tips:
*  Make passwords long (12+ characters)
*  Add symbols and numbers in random positions
*  Use 3–4 unrelated words for a memorable passphrase, separated by symbols/numbers
*  Avoid common substitutions that are still predictable (e.g., P\@ssw0rd)
*  Enable multi-factor authentication (MFA)


 Step 7 – Research common password attacks
Summarize common attacks and defenses:
* Brute force: try every combination — defend with length & entropy
* Dictionary: use wordlists — defend by avoiding words
* Hybrid/rules-based: word + common substitutions — defend with randomness
* Credential stuffing: reuse of leaked passwords — defend by using unique passwords
* Phishing & keyloggers: social/technical attack vectors — defend with MFA, careful link checking, and updated systems


 Step 8 – Summarize how password complexity affects security
Key points:
* Every extra character and added character type exponentially increases the search space and the time required for brute-force.
* Randomness prevents dictionary-based matches and common-rule shortcuts.
* Uniqueness prevents cross-site compromise via credential stuffing.
* Combine long, random passwords with MFA and rate-limiting for best protection.
